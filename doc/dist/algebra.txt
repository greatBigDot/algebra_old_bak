-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Typeclasses and convenience functions for some algebraic structures (laws unenforced).
--   
--   This package provides a basic represntation of some common algebraic
--   structures (groups, rings, fields, vector spaces, etc.) as Haskell
--   typeclasses. Their laws are currently unenforced. (Though, once
--   Haskell upgrades its type system to allow dependent typing, that will
--   hopefully change!) Till then, this'll do.
--   
--   Mathematically, the idea of an algebraic structure is quite simple.
--   Consider (a) the set of integers &lt;math&gt;, (b) two of the most
--   basic functions on it, &lt;math&gt; and &lt;math&gt;, and (c) two
--   unique elements of it, &lt;math&gt; and &lt;math&gt;. There are
--   various obvious properties that universally hold; e.g.:
--   
--   <ul>
--   <li>&lt;math&gt;, and &lt;math&gt;. &lt;math&gt;
--   [<i>Associativity</i>]</li>
--   <li>&lt;math&gt;, and &lt;math&gt; &lt;math&gt;
--   [<i>Commutativity</i>]</li>
--   <li>&lt;math&gt; &lt;math&gt; [<i>Identities</i>]</li>
--   <li>&lt;math&gt; &lt;math&gt; [<i>Additive inverse</i>]</li>
--   <li>&lt;math&gt; &lt;math&gt; [<i>Distributivity</i>]</li>
--   </ul>
--   
--   (Unquantified variables are implicitly quantified over the domain of
--   discourse, &lt;math&gt;.) There are various things to note. Plenty of
--   other sets satisfy these laws; for example, the rational numbers, or
--   the real numbers, or the complex numbers. Note also that, say, the
--   irrational numbers do <i>not</i> satisfy these properties;
--   &lt;math&gt; is rational, and so &lt;math&gt; isn't even a binary
--   function over the irrationals! Finally, note the asymmetry in the
--   fourth law, an asymmetry not present in the others. This is necessary,
--   as the following does <i>not</i> hold:
--   
--   <ul>
--   <li>&lt;math&gt; &lt;math&gt; [<i>Multiplicative inverse</i>]</li>
--   </ul>
--   
--   While &lt;math&gt;, for example, <i>does</i> have a multiplicative
--   inverse among the <i>rationals</i>, it doesn't when we restrict our
--   attention to the integers. (In fact, not even the rational numbers
--   satisfy the above law, because &lt;math&gt; does not have a
--   multiplicative inverse. After modifying the law to account for that
--   special case, however, the rationals do satisfy it, while the integers
--   still don't.)
--   
--   So, was the point of all this? All we did was consider some numbers
--   that everyone is familiar with and mention some elementary properties
--   of them. How does that lead to any interesting mathematical questions?
--   Well, the key idea, the crucial motivating question of abstract
--   algebra, is the following:
--   
--   <b><i>What happens when we go in the other direction?</i></b>
--   
--   That is, what happens when we <i>start</i> with a list of properties,
--   then ask what sorts of things satisfy it? The answers to this question
--   are more diverse than you may expect. For example, in addition to the
--   integers and its extensions, other more esoteric sets satisfy the
--   above laws. E.g., the set of integers modulo five, &lt;math&gt;. In
--   this set, to calculate the "sum" of two elements, we calculate their
--   usual sum, then take that modulo 5 (that is, the remainder when
--   dividing by 5; the modulo operation is essentially a generalization of
--   the concept of even and odd numbers to divisibilities other than by
--   2); similarly with the product. Thus, for example, &lt;math&gt;. A
--   similar line of reasoning indicates that additive inverses exist---in
--   fact, so do multiplicative inverses, at least for non-â€‹&lt;math&gt;
--   elements! Observe:
--   
--   <ul>
--   <li>&lt;math&gt;</li>
--   <li>&lt;math&gt;</li>
--   <li>&lt;math&gt;</li>
--   <li>&lt;math&gt;</li>
--   </ul>
--   
--   However, if we look at the integers modulo 6 &lt;math&gt;, we find
--   that multiplicative inverses do <i>not</i> always exist; only
--   &lt;math&gt; and &lt;math&gt; are invertible. (Try it!) In fact, the
--   integers modulo &lt;math&gt;, &lt;math&gt;, satisfy the weakened
--   (i.e., ignoring &lt;math&gt;) multiplicative inverse law if and only
--   if &lt;math&gt; is prime.
--   
--   These do not exhaust the possibilities---not even close!---but it
--   should be enough to give a taste of what abstract algebra is all
--   about. You start with some set with defined operations (a pairing
--   known as a "structure") that you are familiar with, you distill that
--   structure down to its most basic and fundamental properties, and then
--   you look at what sorts of things satisfy those properties and what
--   those properties alone entail. This allows you to generalize familiar
--   structures to more abstract ideas---the original motivating structure
--   becomes just a special case of a more general property, and seemingly
--   disparate things suddenly become two special cases of a more general
--   idea.
--   
--   The laws I gave above define a ring; that is, any set (with the two
--   defined binary operations over it, as well as the two distinguished
--   elements) satisfying the above list of properties is known as a
--   <b>ring</b>. The laws are called the <b>ring axioms</b>. <b>Ring
--   theory</b> is the branch of math studying rings and how they relate to
--   each other and to other parts of math. Rings are not the only
--   algebraic structure; there are many, many more, and this package
--   defines a few of the more important ones as Haskell typeclasses, as
--   well as some instances of types as members of that typeclass. Each
--   module contains in its documentation an overview of that algebraic
--   structure and some interesting properties of them that make them worth
--   studying.
--   
--   Sadly, the laws are not yet enforced (as is typical with Haskell
--   typeclasses); only the "signature" of the structures are (the set(s),
--   the operation(s) defined over it/them, and the types of all objects
--   involved).
@package algebra
@version 0.1.0.0


-- | This module defines a mathematical "group" as a Haskell typeclass.
--   (See module <a>Algebra</a> for an overview of algebraic structures.
--   See typeclass <a>Group</a> for discussion about implementation.)
--   Groups are defined by a single set &lt;math&gt; and an associative
--   unital invertible binary operation &lt;math&gt; defined over it.
--   Alternatively, one can view a group as consisting of said set, an
--   associative binary operation &lt;math&gt;, a nullary operation (i.e.,
--   an element of the set) &lt;math&gt;, and a unary operation
--   &lt;math&gt; over it, such that &lt;math&gt; is an identity of
--   &lt;math&gt; and &lt;math&gt; inverts &lt;math&gt;. These perspectives
--   are equivalent; to prove equivalence, however, you must first show
--   that the first definition implies the uniqueness of the identity and
--   the inversion operator. (Proving this is left as an exercise to the
--   reader.) The latter view, typical in universal algebra, will be much
--   more convenient to use in Haskell; as mentioned in the package
--   overview, the structures' axioms cannot be verified, and so treating
--   the identity and inversion operators as part of a group's definition
--   allows us to verify more of the mathematical details.
--   
--   To speak more formally, a <b>group</b> is a 4-tuple &lt;math&gt;
--   satisfying the following axioms (all variables are implcitly
--   universally quantified over &lt;math&gt;):
--   
--   <ul>
--   <li><i>Associativity:</i> &lt;math&gt; &lt;math&gt;</li>
--   <li><i>Identity:</i> &lt;math&gt; &lt;math&gt;</li>
--   <li><i>Inverses:</i> &lt;math&gt; &lt;math&gt;</li>
--   </ul>
--   
--   Groups are useful for modelling <i>symmetries</i>. That is, you have
--   some object---say, a geometrical figure---that you can transform in
--   various ways that leave the object unchanged. For example, if you have
--   a square, you can rotate it &lt;math&gt;, &lt;math&gt;, &lt;math&gt;,
--   or &lt;math&gt; and it looks the same as it did before. You can view
--   these "symmetries"---that is, transformations that preserve the
--   salient features of the object---as forming a group, with composition
--   as the group operation. Indeed, any two symmetric transforms applied
--   one after another yield another symmetry; applying one symmetry, and
--   then (applying a second, then a third) is exactly equivalent to
--   (applying one symmetry, and then a second), and then applying a third;
--   there is an identity symmetry that leaves other symmetries unchanged
--   upon composition (the identity function (or if you prefer, rotation by
--   &lt;math&gt;)); and every symmetry has a corresponding symmetry that
--   undoes it. The awesome thing is that these observations don't merely
--   apply the rotations of a square---if you have <i>any</i> set of ways
--   to transform <i>any</i> mathematical object, such that you include a
--   "do-nothing" transformation and every transformation has a
--   corresponding transformation done "in reverse"--- well, then you have
--   a group! (Assoicativity if guaranteed because function composition is
--   of course always associative!) Interestingly, the converse of this
--   idea holds; every group is a subgroup of some symmetric group. As for
--   applications, group theory is central to modern particle physics due
--   to the various symmetric properties the universe exhibits at that
--   scale (sorry for being so vague, but it's too complicated to go into
--   further detail here).
--   
--   Groups probably have the highest product of simplicity and
--   interesting-ness, for some values of those terms. They provide a
--   natural foudnation for defining more "structured" structures, such as
--   rings.
module Algebra.Data.Group

-- | A <tt>Group</tt> is a type <tt>G</tt> combined with an instance
--   declaration for the <a>Group</a> typeclass, whose minimally complete
--   (and in fact only possible) definition is of <tt>(((*) :: G -&gt; G
--   -&gt; G), ((id) :: G), (inv :: G -&gt; G))</tt> that satisfies the
--   following unchecked properties:
--   
--   <pre>
--   (x * y) * z == x * (y * z)
--   </pre>
--   
--   <pre>
--   (x * id == x) &amp;&amp; (id * x == x)
--   </pre>
--   
--   <pre>
--   (x * inv x == x) &amp;&amp; (inv x * x == x)
--   </pre>
--   
--   Note that the same type can be a group in multiple ways. This is a bit
--   annoying in Haskell, as it necessitates the use of <tt>type</tt>
--   wrappers to implement a class in different ways in the same scope.
class (Eq g) => Group g
(*) :: Group g => g -> g -> g
id :: Group g => g
inv :: Group g => g -> g

-- | Exponentiation, or repeated application of the group function
--   <tt>(</tt><a>*</a><tt>)</tt>. Note that this is <i>not</i> a binary
--   operation over a <a>Group</a>; the first argument is a member of the
--   group, but the second is just an integer, specifying how many times to
--   repeat the operation. Raising to the zeroth power yields identity;
--   raising to a negative power is the corresponding positive power of the
--   inverse.
(^) :: (Group grp) => grp -> Integer -> grp

-- | Right group division. The first argument is multiplied on the right by
--   the inverse of the second argument. Because
--   <tt>(</tt><a>*</a><tt>)</tt> is not necessarily commutative, this may
--   differ from left division, <tt>(</tt><a>\\</a><tt>)</tt>. For example,
--   <tt>h*g//g == h</tt>, but <tt>h*g//h</tt> is not necessarily
--   <tt>g</tt>.
(//) :: (Group grp) => grp -> grp -> grp

-- | Left group division. The first argument is multiplied on the left by
--   the inverse of the second argument. Because
--   <tt>(</tt><a>*</a><tt>)</tt> is not necessarily commutative, this may
--   differ from right division, <tt>(</tt><a>//</a><tt>)</tt>. For
--   example, <tt>h*g\\h == g</tt>, but <tt>h*g\\g</tt> is not necessarily
--   <tt>h</tt>.
(\\) :: (Group grp) => grp -> grp -> grp

-- | The <a>order</a> of an element of a group is the smallest positive
--   integer such that raising the group element to that power (see
--   <tt>(</tt><a>^</a><tt>)</tt>) yields the identity, <a>id</a>---or
--   positive infinity if no such element exists. The latter case implies
--   that this function may be (and in fact often is) non-terminating. In
--   finite groups (groups with finitely many elements), however, it is a
--   useful construct; the order of any element in a fintie group is
--   finite.
order :: (Group grp) => grp -> Integer
instance (Algebra.Data.Group.Group g, Algebra.Data.Group.Group h) => Algebra.Data.Group.Group (g, h)
instance Algebra.Data.Group.Group GHC.Integer.Type.Integer
instance Algebra.Data.Group.Group GHC.Real.Rational


-- | This module defines the algebraic structure known as an "abelian
--   group" as a Haskell typeclass. Abelian groups are simply groups (see
--   <a>Group</a> in <a>Algebraic.Data.Group</a>) with the extra condition
--   that the binary operation must be abelian (that is, commutative).
--   
--   Formally, an abelian group is a 4-tuple &lt;math&gt; satisfying the
--   following axioms:
--   
--   <ul>
--   <li>&lt;math&gt; forms a group</li>
--   <li>&lt;math&gt;</li>
--   </ul>
--   
--   You may have noticed that the notation here differs from the one
--   presented for groups---here, the plus sign is used as the operation
--   (and zero as the identity), while for more general groups, the
--   multiplication symbol was used (and one as the identity). This is
--   intentional. The class of abelian groups has rather different
--   behavior, arising in different situations, than groups. At first this
--   fact may be a surprise, but the commutativity axiom is actually quite
--   strong, especially in the context of groups. Remember, a natural way
--   to think of groups is that they model symmetries---that is, invertible
--   composable mappings from an object to itself. In general, for
--   <i>functions</i> to be commutative with respect to composition is a
--   very special property; reversing the order of two transformations will
--   typically yield different results. E.g., rotating a polygon, then
--   flipping it over; or squaring a number, then adding 5. Flipping the
--   order in which these are applied "typically" changes the outcome. In
--   abelian groups, however, <i>every</i> pair of transformations must
--   yield the same outcome as applying them in other directions. This
--   suggests that viewing them as "symmetries" might not be the best way
--   to think of abelian groups. You can see more discussion of this idea
--   over at MathOverflow, a Q&amp;A site for professional mathematicians:
--   <a>https://mathoverflow.net/questions/2551/</a>
--   
--   Abelian groups are important in algebraic geometry. Algebraic geometry
--   is, roughly speaking, the study of systems of multivariate polynomial
--   equations. An important idea is that of an "algebraic variety", which
--   is essentially the intersection of the roots of a set of multivariate
--   polynomials. For example, a circle with radius &lt;math&gt; and center
--   &lt;math&gt; is an algebraic variety, being the zero of the 2-variable
--   polynomial &lt;math&gt;. In this framework, one can formulate and
--   pursue various interesting ideas---e.g., a generalization of the
--   fundamental theorem of algebra to higher dimensions, a result known as
--   BÃ©zout's Theorem. Anyways, as it turns out, a certain subset of
--   algebraic varietites, known as "abelian varieties", form an abelian
--   group. That is, the points comprising the variety are the group
--   elements, and using the tools of algebraic geometry one can define a
--   natural group operation obeying the group laws that is always
--   commutative. As it turns out, this idea is central to modern
--   cryptography.
--   
--   Another branch of mathematics where abelian groups shine is category
--   theory. Categories, among many other things, abstracts abstract
--   algebra. For example, there is a category of groups, which consists of
--   all groups and all the homomorphisms between them (that is, functions
--   preserving the group operations). Category theory is a very useful and
--   interesting branch of math; it simultaneously generalizes many
--   disprate ideas and introduces many new interesting questions of its
--   own. Also, in a very pleasing and fun way, it abstracts itself---there
--   is a category of categories. (Though, that last idea must be treated
--   with utmost care to avoid set-theoretic Russel's paradox--esque
--   issues; to bypass most of them, you can just consider the category of
--   "small" categories.) The category of abelian groups exhibits various
--   special properties that are useful in the study of categories in
--   general. As such, a subset of categories known as "abelian categories"
--   have been defined, with the category of abelian groups being the
--   motivating example.
module Algebra.Data.AbelianGroup

-- | An <a>AbelianGroup</a> is a type that is an instance of <a>Group</a>
--   that also satisfies the following unchecked property:
--   
--   <pre>
--   x + y == y + x
--   </pre>
--   
--   As the signature of abelian group is the same as that of a group, and
--   since the axioms are currently unchecked, the minimally complete
--   definition is the empty set.
class Group g => AbelianGroup g
(+) :: AbelianGroup g => g -> g -> g
zero :: AbelianGroup g => g
neg :: AbelianGroup g => g -> g


-- | This package provides a basic represntation of some common algebraic
--   structures (groups, rings, fields, vector spaces, etc.) as Haskell
--   typeclasses. Their laws are currently unenforced. (Though, once
--   Haskell upgrades its type system to allow dependent typing, that will
--   hopefully change!) Till then, this'll do.
--   
--   Mathematically, the idea of an algebraic structure is quite simple.
--   Consider (a) the set of integers &lt;math&gt;, (b) two of the most
--   basic functions on it, &lt;math&gt; and &lt;math&gt;, and (c) two
--   unique elements of it, &lt;math&gt; and &lt;math&gt;. There are
--   various obvious properties that universally hold; e.g.:
--   
--   <ul>
--   <li>&lt;math&gt;, and &lt;math&gt;. &lt;math&gt;
--   [<i>Associativity</i>]</li>
--   <li>&lt;math&gt;, and &lt;math&gt; &lt;math&gt;
--   [<i>Commutativity</i>]</li>
--   <li>&lt;math&gt; &lt;math&gt; [<i>Identities</i>]</li>
--   <li>&lt;math&gt; &lt;math&gt; [<i>Additive inverse</i>]</li>
--   <li>&lt;math&gt; &lt;math&gt; [<i>Distributivity</i>]</li>
--   </ul>
--   
--   (Unquantified variables are implicitly quantified over the domain of
--   discourse, &lt;math&gt;.) There are various things to note. Plenty of
--   other sets satisfy these laws; for example, the rational numbers, or
--   the real numbers, or the complex numbers. Note also that, say, the
--   irrational numbers do <i>not</i> satisfy these properties;
--   &lt;math&gt; is rational, and so &lt;math&gt; isn't even a binary
--   function over the irrationals! Finally, note the asymmetry in the
--   fourth law, an asymmetry not present in the others. This is necessary,
--   as the following does <i>not</i> hold:
--   
--   <ul>
--   <li>&lt;math&gt; &lt;math&gt; [<i>Multiplicative inverse</i>]</li>
--   </ul>
--   
--   While &lt;math&gt;, for example, <i>does</i> have a multiplicative
--   inverse among the <i>rationals</i>, it doesn't when we restrict our
--   attention to the integers. (In fact, not even the rational numbers
--   satisfy the above law, because &lt;math&gt; does not have a
--   multiplicative inverse. After modifying the law to account for that
--   special case, however, the rationals do satisfy it, while the integers
--   still don't.)
--   
--   So, was the point of all this? All we did was consider some numbers
--   that everyone is familiar with and mention some elementary properties
--   of them. How does that lead to any interesting mathematical questions?
--   Well, the key idea, the crucial motivating question of abstract
--   algebra, is the following:
--   
--   <b><i>What happens when we go in the other direction?</i></b>
--   
--   That is, what happens when we <i>start</i> with a list of properties,
--   then ask what sorts of things satisfy it? The answers to this question
--   are more diverse than you may expect. For example, in addition to the
--   integers and its extensions, other more esoteric sets satisfy the
--   above laws. E.g., the set of integers modulo five, &lt;math&gt;. In
--   this set, to calculate the "sum" of two elements, we calculate their
--   usual sum, then take that modulo 5 (that is, the remainder when
--   dividing by 5; the modulo operation is essentially a generalization of
--   the concept of even and odd numbers to divisibilities other than by
--   2); similarly with the product. Thus, for example, &lt;math&gt;. A
--   similar line of reasoning indicates that additive inverses exist---in
--   fact, so do multiplicative inverses, at least for non-â€‹&lt;math&gt;
--   elements! Observe:
--   
--   <ul>
--   <li>&lt;math&gt;</li>
--   <li>&lt;math&gt;</li>
--   <li>&lt;math&gt;</li>
--   <li>&lt;math&gt;</li>
--   </ul>
--   
--   However, if we look at the integers modulo 6 &lt;math&gt;, we find
--   that multiplicative inverses do <i>not</i> always exist; only
--   &lt;math&gt; and &lt;math&gt; are invertible. (Try it!) In fact, the
--   integers modulo &lt;math&gt;, &lt;math&gt;, satisfy the weakened
--   (i.e., ignoring &lt;math&gt;) multiplicative inverse law if and only
--   if &lt;math&gt; is prime.
--   
--   These do not exhaust the possibilities---not even close!---but it
--   should be enough to give a taste of what abstract algebra is all
--   about. You start with some set with defined operations (a pairing
--   known as a "structure") that you are familiar with, you distill that
--   structure down to its most basic and fundamental properties, and then
--   you look at what sorts of things satisfy those properties and what
--   those properties alone entail. This allows you to generalize familiar
--   structures to more abstract ideas---the original motivating structure
--   becomes just a special case of a more general property, and seemingly
--   disparate things suddenly become two special cases of a more general
--   idea.
--   
--   The laws I gave above define a ring; that is, any set (with the two
--   defined binary operations over it, as well as the two distinguished
--   elements) satisfying the above list of properties is known as a
--   <b>ring</b>. The laws are called the <b>ring axioms</b>. <b>Ring
--   theory</b> is the branch of math studying rings and how they relate to
--   each other and to other parts of math. Rings are not the only
--   algebraic structure; there are many, many more, and this package
--   defines a few of the more important ones as Haskell typeclasses, as
--   well as some instances of types as members of that typeclass. Each
--   module contains in its documentation an overview of that algebraic
--   structure and some interesting properties of them that make them worth
--   studying.
--   
--   Sadly, the laws are not yet enforced (as is typical with Haskell
--   typeclasses); only the "signature" of the structures are (the set(s),
--   the operation(s) defined over it/them, and the types of all objects
--   involved).
module Algebra
